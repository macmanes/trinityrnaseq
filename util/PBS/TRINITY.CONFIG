##################################################################################################################################
##########################                                                                ########################################
##########################     Trinity PBS job submission with multi part dependencies    ########################################
##########################     User modifiyable input file                                ########################################
##########################                                                                ########################################
##################################################################################################################################
### 	Author: Josh Bowden, CSIRO IM&T
### 	Based on script by Alexie Papanicolaou for submission to PBS pro.
###
###	Configuration file for script to split the Trinity workflow into multiple stages so as to efficiently request 
###	and use appropriate resources (walltime and number of cores) on a computer cluster / supercomputer.
###
###	User must set all the variables in this file to appropriate values 
###	and then run the trinity_pbs.sh script with this file as input as shown below:
###
###	Command line usage:
###			To start (or re-start) an analysis:
###				>trinity_pbs.sh TRINITY.CONFIG
###			To stop previously started PBS jobs on the queue:
###				>trinity_pbs.sh --rm OUTPUTDIR 
###			Where:
###				TRINITY.CONFIG = user specific job details (i.e. the current file)
###				OUTPUTDIR   = is path to output data directory (set below)
###
###	If any stage fails, the jobs may be resubmitted and only the scripts that have not completed 
###	will be resubmitted to the batch system. Either the scripts can be re-run (by using trinity_pbs.sh) 
###	with original (or new) inputs from the current file (changing the variables below)
###	or the original scripts created by trinity_pbs.sh can be re-run by finding them in the output directory.
###
###	Each stage and each array job will have a PBS output file sent to the output directory when the job finishes.
###	This means there will be many output files from the PBS system when the array job runs (from part 4 and 5 mostly). 
###	If any part fails, errors will be specified in these output files.
###
### N.B. The trinity_pbs.sh file must have a number of system specific variables set by a system administrator
###
##################################################################################################################################

###### Set an email to which job progress and status will be sent to.
UEMAIL=users.email@your.institution.edu
###### Set a valid account (if available), otherwise leave as empty string i.e. ACCOUNT=""
ACCOUNT="#PBS -A "
###### Select a value for JOBPRFIX as a root name for subtasks (not longer than 8 characters)
JOBPREFIX="MOUSE4"

###### Set output data directory (OUTPUTDIR)
###### OUTPUTDIR is where PBS scripts will be written and also Trinity results will be stored.
###### This area requires a large amount of space (possibly 100's of GB) and a high file count
###### ($WORKDIR is a standard area on some systems, however users should check that it is valid on their machine)
OUTPUTDIR="$WORKDIR"/new/mouseout4

###### Set input data directory. This has to be explicitly set as it is used in other internal scripts.
###### Make sure you include the final forward slash
DATADIRECTORY=/FULLPATH/TO/DATA/mouse_10M_set/
###### Set input filenames:
FILENAMELEFT=10M.left.fq
FILENAMERIGHT=10M.right.fq
FILENAMESINGLE=""
FILENAMEINPUT=" --seqType fq --left "$DATADIRECTORY""$FILENAMELEFT" --right "$DATADIRECTORY""$FILENAMERIGHT" --SS_lib_type RF "

### STANDARD_JOB_DETAILS set analysis specific input to Trinity.pl 
### N.B. do not use --CPU flag as this is automatically appended
### Set --JM here. If set too high then job may take a long time to start (or may never)
STANDARD_JOB_DETAILS="Trinity.pl --JM 20G "$FILENAMEINPUT" --output "$OUTPUTDIR""

### Stage P1: Time and resources required for Inchworm stage
### MEM_P1 should equal value for --JM  in STANDARD_JOB_DETAILS
### Only use at maximum, half the available CPUs on a node - Inchworm will not efficiently use any extra and you will have to take longer for resources to be assigned
WALLTIME_P1="2:00:00"
MEM_P1="20gb"
NCPU_P1="4"
PBSQUEUE_P1="any"

### Stage P2: Time and resources required for Chrysalis stage
### All CPUs presenct can be used for the Chrysalis parts. They may take a while to be provisioned, so the less request, possibly the faster the jobs turnaround.
WALLTIME_P2="4:00:00"
MEM_P2="4gb"
NCPU_P2="4"
PBSQUEUE_P2="any"

### Stage P3: This is a backup stage for Chrysalis - only runs if time ran out in P2 above.
WALLTIME_P3="4:00:00"
MEM_P3="4gb"
NCPU_P3="4"
PBSQUEUE_P3="any"

### Stage P4: Specify number of QuantifyGraph parallel parts to run as a single 'job'
### If any task here fails then stage 6 will not run. Tasks that fail will reamain in the OUTPUTDIR/chrysalis/quantifyGraph_commands_XYZ files (XYZ is a number)
### The remaining tasks can be run by running the job submission command "trinity_pbs.sh <config_file>" again.
NUMPERARRAYITEM_P4=1000
WALLTIME_P4="00:30:00"
MEM_P4="4gb"
PBSQUEUE_P4="any"

### Stage P5: Butterfly options. Some butterfly jobs can take exceedingly long. Users may need to restart trinity_pbs multiple times to complete. 
### If any task here fails then stage 6 will not run. Tasks that fail will reamain in the OUTPUTDIR/chrysalis/butterfly_commands.adj_XYZ files (XYZ is a number)
### Often there will be a few tasks that take a lot longer than others so multiple submissions to the cluster may be required.
### The remaining tasks can be run by running the job submission command "trinity_pbs.sh <config_file>" again.
### Running the long running tasks seperately may also be a good option.
NUMPERARRAYITEM_P5=1000
WALLTIME_P5="01:00:00"
MEM_P5="10gb"
PBSQUEUE_P5="any"

### For this final stage, ("$JOBPREFIX"_p6.sh), make sure that no error was given, as if there was not enough walltime requested
### then the output data (Trinity.fasta) may be incomplete!
WALLTIME_P6="01:00:00"


